definitions:
  models.CloudFunction:
    properties:
      container:
        description: |-
          Container name
          example: docker.io/library/alpine
        type: string
      env:
        description: Container env variables
        type: string
      id:
        description: |-
          The function UUID
          example: 6204037c-30e6-408b-8aaa-dd8219860b4b
        type: string
      params:
        description: |-
          Container run params
          example: echo test
        type: string
      project:
        $ref: '#/definitions/models.Project'
        description: Linked project
      project_id:
        description: |-
          The project UUID
          example: 6204037c-30e6-403b-8aaa-dd8219860b4b
        type: string
      run_count:
        description: Function run count
        type: integer
      title:
        description: Function title
        type: string
    type: object
  models.CloudFunctionLog:
    properties:
      function_id:
        description: |-
          The function UUID
          example: 6204037c-30e6-408b-8aaa-dd8219520b4b
        type: string
      id:
        description: |-
          The log UUID
          example: 6204037c-30e6-408b-8aaa-dd8219860b4b
        type: string
      result:
        description: Run result
        type: string
      run_at:
        description: Run date time
        type: string
    type: object
  models.Config:
    properties:
      body:
        type: string
      id:
        type: string
      project:
        $ref: '#/definitions/models.Project'
      project_id:
        type: string
      title:
        type: string
    type: object
  models.CreateUserForm:
    properties:
      Email:
        description: new User email
        type: string
      Password:
        description: new User password
        type: string
    type: object
  models.CronJob:
    properties:
      function:
        $ref: '#/definitions/models.CloudFunction'
      function_id:
        type: string
      id:
        type: string
      time_params:
        type: string
      title:
        type: string
    type: object
  models.DataSource:
    properties:
      cache:
        description: Cache result in local db
        type: boolean
      dsn:
        description: Data source dsn
        type: string
      endpoints:
        items:
          $ref: '#/definitions/models.DataSourceEndpoint'
        type: array
      id:
        description: |-
          The data source UUID
          example: 6204011c-30e6-408b-8aaa-dd8219860b4b
        type: string
      project:
        $ref: '#/definitions/models.Project'
        description: Linked project
      project_id:
        description: |-
          Linked project  UUID
          example: 6204011c-30e6-408b-8aaa-dd8214860b4b
        type: string
      title:
        description: Data source title
        type: string
      type:
        description: |-
          The data source type
          Enum of DsType
          example: Mysql
        type: string
    type: object
  models.DataSourceEndpoint:
    properties:
      data_source:
        description: |-
          Linked data source UUID
          example: 6204011c-33e6-408b-8aaa-dd8214860b4b
        type: string
      dataSource:
        $ref: '#/definitions/models.DataSource'
        description: Linked data source
      id:
        description: |-
          The data source endpoint UUID
          example: 6234011c-30e6-408b-8aaa-dd8219860b4b
        type: string
      table_name:
        description: Endpoint table name
        type: string
      title:
        description: Data source endpoint title
        type: string
    type: object
  models.Pipeline:
    properties:
      id:
        description: |-
          The pipeline UUID
          example: 6204037c-30e6-418b-8aaa-dd8219860b4b
        type: string
      input:
        description: Input type
        type: string
      input_id:
        description: |-
          The pipeline input UUID
          example: 6204037c-30e6-418b-8saa-dd8219860b4b
        type: string
      output:
        description: Output type
        type: string
      output_id:
        description: |-
          The pipeline output UUID
          example: 6204037c-30e6-413b-8saa-dd8219860b4b
        type: string
      title:
        description: Mnemonic name
        type: string
    type: object
  models.Project:
    properties:
      id:
        type: string
      key:
        type: string
      origins:
        type: string
      topic:
        type: string
    type: object
  models.PushMessage:
    properties:
      body:
        type: string
      id:
        type: string
      payload:
        type: string
      receivers:
        items:
          $ref: '#/definitions/models.UserDevice'
        type: array
      sent:
        type: boolean
      sent_at:
        type: string
      title:
        type: string
      topic:
        type: string
    type: object
  models.User:
    properties:
      active:
        description: Is user active
        type: boolean
      admin:
        description: Is user admin
        type: boolean
      created_at:
        description: Created at date time
        type: string
      devices:
        description: user devices
        items:
          $ref: '#/definitions/models.UserDevice'
        type: array
      email:
        description: User email
        type: string
      id:
        description: |-
          The user UUID
          example: 6204037c-30e6-408b-8aaa-dd8219860b4b
        type: string
      last_login:
        description: Last login date time
        type: string
      token:
        description: Auth token
        type: string
    type: object
  models.UserDevice:
    properties:
      device:
        description: |-
          Device type can be android | ios | macos | windows | linux | web
          example: 'linux'
        type: string
      device_token:
        description: |-
          UUID Device Token
          9f80fcc8-0102-4795-94c0-4190c168ffc2
        type: string
      id:
        description: |-
          The UUID of a device
          example: 6204037c-30e6-408b-8aaa-dd8219860b4b
        type: string
      user_id:
        description: |-
          The UUID of owned user
          example: 6204037c-30e6-408b-8aaa-dd8219860b4b
        type: string
    type: object
info:
  contact:
    email: fedor@support-pc.org
    name: API Support
    url: https://openitstudio.ru
  description: Db server API description.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Db server API
  version: "1.0"
paths:
  /admin/auth:
    post:
      consumes:
      - application/json
      description: Authenticate in admin
      parameters:
      - description: Email for login
        in: query
        name: email
        type: string
      - description: Password for login
        in: query
        name: password
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Login to admin
      tags:
      - Admin
  /admin/cf:
    get:
      consumes:
      - application/json
      description: List cloud functions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CloudFunction'
            type: array
      security:
      - bearerAuth: []
      summary: List cloud functions
      tags:
      - Cloud functions
      - Admin
    post:
      consumes:
      - application/json
      description: Create cloud function
      parameters:
      - description: Function info
        in: body
        name: cf
        required: true
        schema:
          $ref: '#/definitions/models.CloudFunction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CloudFunction'
      security:
      - bearerAuth: []
      summary: Create cloud function
      tags:
      - Cloud functions
      - Admin
  /admin/cf/{id}:
    delete:
      consumes:
      - application/json
      description: Delete cloud function
      parameters:
      - description: cf id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - bearerAuth: []
      summary: Delete cloud function
      tags:
      - Cloud functions
      - Admin
    get:
      consumes:
      - application/json
      description: Function detail info
      parameters:
      - description: cf id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CloudFunction'
      security:
      - bearerAuth: []
      summary: Function info
      tags:
      - Cloud functions
      - Admin
    put:
      consumes:
      - application/json
      description: Update cloud function
      parameters:
      - description: Source info
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/models.DataSource'
      - description: Function id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DataSource'
      security:
      - bearerAuth: []
      summary: Update cloud function
      tags:
      - Cloud functions
      - Admin
  /admin/cf/{id}/log:
    get:
      consumes:
      - application/json
      description: Cloud function logs
      parameters:
      - description: Fuc id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CloudFunctionLog'
      security:
      - bearerAuth: []
      summary: Logs
      tags:
      - Cloud functions
      - Admin
  /admin/config:
    get:
      consumes:
      - application/json
      description: List configs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Config'
            type: array
      security:
      - bearerAuth: []
      summary: List configs
      tags:
      - Config manager
      - Admin
    post:
      consumes:
      - application/json
      description: Create config
      parameters:
      - description: Config info
        in: body
        name: config
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - bearerAuth: []
      summary: Create config
      tags:
      - Config manager
      - Admin
  /admin/config/{id}:
    delete:
      consumes:
      - application/json
      description: Delete config
      parameters:
      - description: Config id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - bearerAuth: []
      summary: Delete config
      tags:
      - Config manager
      - Admin
    get:
      consumes:
      - application/json
      description: Config detail info
      parameters:
      - description: Config id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Config'
      security:
      - bearerAuth: []
      summary: Config info
      tags:
      - Config manager
      - Admin
    put:
      consumes:
      - application/json
      description: Update config
      parameters:
      - description: Config info
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/models.Config'
      - description: Config id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Config'
      security:
      - bearerAuth: []
      summary: Update config
      tags:
      - Config manager
      - Admin
  /admin/cron:
    get:
      consumes:
      - application/json
      description: List cron jobs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CronJob'
            type: array
      security:
      - bearerAuth: []
      summary: List cron jobs
      tags:
      - Cron
      - Admin
    post:
      consumes:
      - application/json
      description: Create cron job
      parameters:
      - description: Push info
        in: body
        name: cron
        required: true
        schema:
          $ref: '#/definitions/models.CronJob'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CronJob'
      security:
      - bearerAuth: []
      summary: Create cron job
      tags:
      - Cron
      - Admin
  /admin/cron/{id}:
    delete:
      consumes:
      - application/json
      description: Delete cron job
      parameters:
      - description: Cron id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - bearerAuth: []
      summary: Delete cron job
      tags:
      - Cron
      - Admin
    get:
      consumes:
      - application/json
      description: Cron job detail info
      parameters:
      - description: Push id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CronJob'
      security:
      - bearerAuth: []
      summary: Cron job info
      tags:
      - Cron
      - Admin
    put:
      consumes:
      - application/json
      description: Update cron job
      parameters:
      - description: Cron job info
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/models.CronJob'
      - description: Cron id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CronJob'
      security:
      - bearerAuth: []
      summary: Update cron job
      tags:
      - Cron
      - Admin
  /admin/ds:
    get:
      consumes:
      - application/json
      description: List data sources
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DataSource'
            type: array
      security:
      - bearerAuth: []
      summary: List data sources
      tags:
      - Data source
      - Admin
    post:
      consumes:
      - application/json
      description: Create data source
      parameters:
      - description: Data source info
        in: body
        name: ds
        required: true
        schema:
          $ref: '#/definitions/models.DataSource'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DataSource'
      security:
      - bearerAuth: []
      summary: Create data source
      tags:
      - Data source
      - Admin
  /admin/ds/{dsIid}/dse:
    get:
      consumes:
      - application/json
      description: List data source endpoints
      parameters:
      - description: Data source id
        in: path
        name: dsIid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DataSourceEndpoint'
            type: array
      security:
      - bearerAuth: []
      summary: List data source endpoints
      tags:
      - Data source
      - Admin
  /admin/ds/{id}:
    delete:
      consumes:
      - application/json
      description: Delete data source
      parameters:
      - description: Ds id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - bearerAuth: []
      summary: Delete data source
      tags:
      - Data source
      - Admin
    get:
      consumes:
      - application/json
      description: Data source detail info
      parameters:
      - description: Source id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DataSource'
      security:
      - bearerAuth: []
      summary: Data source info
      tags:
      - Data source
      - Admin
    put:
      consumes:
      - application/json
      description: Update date source
      parameters:
      - description: Source info
        in: body
        name: source
        required: true
        schema:
          $ref: '#/definitions/models.DataSource'
      - description: Source info
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DataSource'
      security:
      - bearerAuth: []
      summary: Update date source
      tags:
      - Data source
      - Admin
  /admin/ds/dse/{dsId}:
    post:
      consumes:
      - application/json
      description: Create data source endpoint
      parameters:
      - description: Data source info
        in: body
        name: dse
        required: true
        schema:
          $ref: '#/definitions/models.DataSourceEndpoint'
      - description: Data source id
        in: path
        name: dsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DataSourceEndpoint'
      security:
      - bearerAuth: []
      summary: Create data source endpoint
      tags:
      - Data source
      - Admin
  /admin/ds/dse/{dsId}/{id}:
    get:
      consumes:
      - application/json
      description: Data source endpoint detail info
      parameters:
      - description: Data source id
        in: path
        name: dsId
        required: true
        type: string
      - description: Endpoint id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DataSource'
      security:
      - bearerAuth: []
      summary: Data source endpoint info
      tags:
      - Data source
      - Admin
    put:
      consumes:
      - application/json
      description: Update date source endpoint
      parameters:
      - description: Endpoint info
        in: body
        name: dse
        required: true
        schema:
          $ref: '#/definitions/models.DataSourceEndpoint'
      - description: Endpoint id
        in: path
        name: id
        required: true
        type: string
      - description: Data source id
        in: path
        name: dsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DataSourceEndpoint'
      security:
      - bearerAuth: []
      summary: Update date source endpoint
      tags:
      - Data source
      - Admin
  /admin/em/list/{topic}:
    get:
      consumes:
      - application/json
      description: List topic records for admin access
      parameters:
      - description: Topic name
        in: path
        name: topic
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: object
            type: array
      security:
      - bearerAuth: []
      summary: List
      tags:
      - Entity manager
      - Admin
  /admin/pl:
    get:
      consumes:
      - application/json
      description: List pipelines
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Pipeline'
            type: array
      security:
      - bearerAuth: []
      summary: List pipelines
      tags:
      - Pipeline
      - Admin
    post:
      consumes:
      - application/json
      description: Create pipeline
      parameters:
      - description: Pipeline info
        in: body
        name: pl
        required: true
        schema:
          $ref: '#/definitions/models.Pipeline'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Pipeline'
      security:
      - bearerAuth: []
      summary: Create pipeline
      tags:
      - Pipeline
      - Admin
  /admin/pl/{id}:
    delete:
      consumes:
      - application/json
      description: Delete pipeline
      parameters:
      - description: Pipeline id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - bearerAuth: []
      summary: Delete pipeline
      tags:
      - Pipeline
      - Admin
    get:
      consumes:
      - application/json
      description: Pipeline detail info
      parameters:
      - description: Pipeline id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Pipeline'
      security:
      - bearerAuth: []
      summary: Pipeline info
      tags:
      - Pipeline
      - Admin
    put:
      consumes:
      - application/json
      description: Update pipeline
      parameters:
      - description: Pipeline info
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/models.Pipeline'
      - description: Pipeline id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Pipeline'
      security:
      - bearerAuth: []
      summary: Update pipeline
      tags:
      - Pipeline
      - Admin
  /admin/push:
    get:
      consumes:
      - application/json
      description: List push messages
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PushMessage'
            type: array
      security:
      - bearerAuth: []
      summary: List push messages
      tags:
      - Push messages
      - Admin
    post:
      consumes:
      - application/json
      description: Create push message
      parameters:
      - description: Push info
        in: body
        name: push
        required: true
        schema:
          $ref: '#/definitions/models.PushMessage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PushMessage'
      security:
      - bearerAuth: []
      summary: Create push message
      tags:
      - Push messages
      - Admin
  /admin/push/{id}:
    delete:
      consumes:
      - application/json
      description: Delete push
      parameters:
      - description: Push id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - bearerAuth: []
      summary: Delete push
      tags:
      - Push messages
      - Admin
    get:
      consumes:
      - application/json
      description: Push detail info
      parameters:
      - description: Push id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PushMessage'
      security:
      - bearerAuth: []
      summary: Push info
      tags:
      - Push messages
      - Admin
    put:
      consumes:
      - application/json
      description: Update push
      parameters:
      - description: push info
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/models.PushMessage'
      - description: push id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PushMessage'
      security:
      - bearerAuth: []
      summary: Update push
      tags:
      - Push messages
      - Admin
  /admin/topics:
    get:
      consumes:
      - application/json
      description: List topics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Project'
            type: array
      security:
      - bearerAuth: []
      summary: List topics
      tags:
      - TopicOutput
    post:
      consumes:
      - application/json
      description: Create topic
      parameters:
      - description: topic info
        in: body
        name: topic
        required: true
        schema:
          $ref: '#/definitions/models.Project'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Project'
      security:
      - bearerAuth: []
      summary: Create topic
      tags:
      - Entity manager
      - Admin
  /admin/topics/{id}:
    delete:
      consumes:
      - application/json
      description: Delete topic
      parameters:
      - description: TopicOutput id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      summary: Delete topic
      tags:
      - Entity manager
      - Admin
    get:
      consumes:
      - application/json
      description: topic detail info
      parameters:
      - description: TopicOutput id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Project'
      security:
      - bearerAuth: []
      summary: TopicOutput
      tags:
      - Entity manager
      - Admin
    put:
      consumes:
      - application/json
      description: Update topic
      parameters:
      - description: Project info
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/models.Project'
      - description: Project id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Project'
      security:
      - bearerAuth: []
      summary: Update topic
      tags:
      - Entity manager
      - Admin
  /admin/topics/{topic}/data:
    get:
      consumes:
      - application/json
      description: topic data
      parameters:
      - description: TopicOutput name
        in: path
        name: topic
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: object
            type: array
      security:
      - bearerAuth: []
      summary: TopicOutput data
      tags:
      - Entity manager
      - Admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: List users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - bearerAuth: []
      summary: List users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - bearerAuth: []
      summary: Create user
      tags:
      - User
      - Admin
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - bearerAuth: []
      summary: Delete user
      tags:
      - User
      - Admin
    get:
      consumes:
      - application/json
      description: User detail info
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - bearerAuth: []
      summary: User info
      tags:
      - User
      - Admin
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: User info
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/models.User'
      - description: User info
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - bearerAuth: []
      summary: Update user
      tags:
      - User
      - Admin
  /api/cf/{id}/run:
    get:
      consumes:
      - application/json
      description: Run function with id
      parameters:
      - description: Auth key
        in: header
        name: db-key
        type: string
      - description: Function id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Run function
      tags:
      - Cloud functions
      - Public Api
  /api/cf/{id}/run/{rid}:
    get:
      consumes:
      - application/json
      description: List logs of function run
      parameters:
      - description: Auth key
        in: header
        name: db-key
        type: string
      - description: Function id
        in: path
        name: id
        required: true
        type: string
      - description: Run id
        in: path
        name: rid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CloudFunctionLog'
      summary: List logs
      tags:
      - Cloud functions
      - Public Api
  /api/device/register:
    post:
      consumes:
      - application/json
      description: Register device to receive push
      parameters:
      - description: Device info
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/models.UserDevice'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserDevice'
      summary: Register device
      tags:
      - Push messages
      - Public Api
  /api/push/{id}/run:
    get:
      consumes:
      - application/json
      description: Send push with id
      parameters:
      - description: Auth key
        in: header
        name: db-key
        required: true
        type: string
      - description: Push id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Send push
      tags:
      - Push messages
      - Public Api
  /api/push/subscribe/{deviceId}:
    get:
      consumes:
      - application/json
      description: Socket subscribe to push notifications
      parameters:
      - description: Device id to subscribe
        in: path
        name: deviceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: object
            type: array
      summary: Subscribe
      tags:
      - Push messages
  /api/storage:
    post:
      consumes:
      - application/json
      description: Put file to storage
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - bearerAuth: []
      summary: Put file to storage
      tags:
      - Storage
      - Admin
  /api/user/auth:
    post:
      consumes:
      - application/json
      description: Authenticate via api
      parameters:
      - description: Email for login
        in: query
        name: email
        type: string
      - description: Password for login
        in: query
        name: password
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Login via api
      tags:
      - User
      - Public Api
  /api/user/me:
    get:
      consumes:
      - application/json
      description: Get current user info
      parameters:
      - description: Email for login
        in: query
        name: email
        type: string
      - description: Password for login
        in: query
        name: password
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - bearerAuth: []
      summary: User info
      tags:
      - User
      - Public Api
  /api/user/register:
    post:
      consumes:
      - application/json
      description: Register via api
      parameters:
      - description: Email for login
        in: query
        name: email
        type: string
      - description: Password for login
        in: query
        name: password
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Register via api
      tags:
      - User
      - Public Api
  /config/{id}:
    get:
      consumes:
      - application/json
      description: Get config by id
      parameters:
      - description: Config id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: object
            type: array
      summary: Config
      tags:
      - Config manager
      - Public Api
  /ds/dse/{dsId}/{id}:
    delete:
      consumes:
      - application/json
      description: Delete data source endpoint
      parameters:
      - description: Data source endpoint id
        in: path
        name: id
        required: true
        type: string
      - description: Data source id
        in: path
        name: dsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: ""
      security:
      - bearerAuth: []
      summary: Delete data source endpoint
      tags:
      - Data source
      - Admin
  /dse/{id}:
    get:
      consumes:
      - application/json
      description: Get data source by id
      parameters:
      - description: Auth key
        in: header
        name: db-key
        required: true
        type: string
      - description: Source id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Project'
      summary: Get item
      tags:
      - Data source
      - Public Api
  /em/{topic}:
    post:
      consumes:
      - application/json
      description: Create topic record
      parameters:
      - description: Topic name
        in: path
        name: topic
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: object
            type: array
      summary: Create
      tags:
      - Entity manager
  /em/{topic}/{id}:
    delete:
      consumes:
      - application/json
      description: Delete entity record
      parameters:
      - description: Topic name
        in: path
        name: topic
        required: true
        type: string
      - description: Topic record id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: object
            type: array
      summary: Delete
      tags:
      - Entity manager
    patch:
      consumes:
      - application/json
      description: Update entity record
      parameters:
      - description: Topic name
        in: path
        name: topic
        required: true
        type: string
      - description: Topic record id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: object
            type: array
      summary: Update
      tags:
      - Entity manager
  /em/find/{topic}:
    get:
      consumes:
      - application/json
      description: Search in topic
      parameters:
      - description: Topic name
        in: path
        name: topic
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: object
            type: array
      summary: Search
      tags:
      - Entity manager
  /em/list/{topic}:
    get:
      consumes:
      - application/json
      description: List topic records
      parameters:
      - description: Topic name
        in: path
        name: topic
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: object
            type: array
      summary: List
      tags:
      - Entity manager
  /em/subscribe/{topic}/{key}:
    get:
      consumes:
      - application/json
      description: Socket subscribe to topic
      parameters:
      - description: Topic name
        in: path
        name: topic
        required: true
        type: string
      - description: Db key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: object
            type: array
      summary: Subscribe
      tags:
      - Entity manager
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
